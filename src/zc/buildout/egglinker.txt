Custom script support
=====================

The egg-linker module provides support for creating scripts from
eggs.  It provides a function similar to setup tools except that it
provides facilities for baking a script's path into the script.  This
has two advantages:

- The eggs to be used by a script are not chosen at run time, making
  startup faster and, more importantly, deterministic.

- The script doesn't have to import pkg_resources because the logic
  that pkg_resources would execute at run time is executed at
  script-creation time.

We have a directory with some sample eggs in it:

    >>> ls(sample_eggs)
    -  demo-0.1-py2.3.egg
    -  demo-0.2-py2.3.egg
    -  demo-0.3-py2.3.egg
    -  demoneeded-1.0-py2.3.egg

The demo package depends on the demoneeded package.

The egglinker module can be used to generate scripts. Let's create a
desitnation directory for it to place them in:

    >>> import tempfile
    >>> bin = tempfile.mkdtemp()

Now, we'll use the egg linker to generate scripts in this directory
from the demo egg:

    >>> import zc.buildout.egglinker
    >>> scripts = zc.buildout.egglinker.scripts(['demo==0.1'], bin,
    ...                                         [sample_eggs])

the three arguments we passed were:

1. A sequence of distribution requirements.  These are of the same
   form as setuptools requirements.  Here we passed a single
   requirement, for the version 0.1 demo distribution.

2. The destination directory.

3, A sequence of egg directories, which are searched for suitable
   distributions.

The bin directory now contains 2 generated scripts:

    >>> ls(bin)
    -  demo
    -  py_demo

The return value is a list of the scripts generated:
    
    >>> import os
    >>> scripts == [os.path.join(bin, 'demo'), os.path.join(bin, 'py_demo')]
    True

The demo script run the entry point defined in the demo egg:

    >>> cat(bin, 'demo')
    #!/usr/local/bin/python2.3
    <BLANKLINE>
    import sys
    sys.path[0:0] = [
      '/tmp/tmpuR5-n7eggtest/dist/demo-0.1-py2.3.egg',
      '/tmp/tmpuR5-n7eggtest/dist/demoneeded-1.0-py2.3.egg'
      ]
    <BLANKLINE>
    import eggrecipedemo
    <BLANKLINE>
    if __name__ == '__main__':
        eggrecipedemo.main()

Some things to note:

- The demo and demoneeded eggs are added to the beginning of sys.path.

- The module for the script entry point is imported and the entry
  point, in this case, 'main', is run.

The py_demo script simply run the Python interactive interpreter with
the path set:

    >>> cat(bin, 'py_demo')
    #!/usr/local/bin/python2.3 -i
    <BLANKLINE>
    import sys
    sys.path[0:0] = [
      '/tmp/tmpuR5-n7eggtest/dist/demo-0.1-py2.3.egg',
      '/tmp/tmpuR5-n7eggtest/dist/demoneeded-1.0-py2.3.egg'
      ]

An additional argumnet can be passed to define which scripts to install
and to provie script names. The argument is a dictionary mapping
original script names to new script names.

    >>> import shutil
    >>> shutil.rmtree(bin)
    >>> bin = tempfile.mkdtemp()
    >>> scripts = zc.buildout.egglinker.scripts(
    ...    ['demo==0.1'], bin, [sample_eggs],
    ...    dict(demo='run'))
    >>> scripts == [os.path.join(bin, 'run')]
    True
    >>> ls(bin)
    -  run

    >>> print system(os.path.join(bin, 'run')),
    1 1

    >>> shutil.rmtree(bin)

Sometimes we need more control over script generation.  Some
lower-level APIs are available to help us generate scripts ourselves.
These apis are a little bit higher level than those provided by
the pkg_resources from the setuptools distribution.

The path method returns a path to a set of eggs satisftying a sequence
of requirements from a sequence of egg directories:

    >>> zc.buildout.egglinker.path(['demo==0.1'], [sample_eggs])
    ... # doctest: +NORMALIZE_WHITESPACE
    ['/tmp/tmpQeJjpkeggtest/dist/demo-0.1-py2.4.egg', 
     '/tmp/tmpQeJjpkeggtest/dist/demoneeded-1.0-py2.4.egg']


The location method returns the distribution location for an egg that
satisfies a requirement:

    >>> zc.buildout.egglinker.location('demo==0.1', [sample_eggs])
    '/tmp/tmpQeJjpkeggtest/dist/demo-0.1-py2.4.egg'

The distributions function can retrieve a list of distributions found
ineg directories that match a sequence of requirements:

    >>> [(d.project_name, d.version) for d in 
    ...  zc.buildout.egglinker.distributions(['demo==0.1'], [sample_eggs])]
    [('demo', '0.1'), ('demoneeded', '1.0')]

